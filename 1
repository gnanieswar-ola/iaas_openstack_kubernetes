from flask import Flask, request, jsonify, abort
from flask_cors import CORS
import subprocess
import ipaddress
from threading import Thread
import uuid

app = Flask(__name__)
CORS(app)

# Global variable
cluster_creation_status = {'status': 'pending', 'message': 'Cluster creation in progress'}

def start_ansible_playbook(ansible_command):
    Thread(target=run_ansible_playbook, args=(ansible_command,)).start()

def validate_ip_addresses(ips):
    try:
        return [str(ipaddress.ip_address(ip)) for ip in ips]
    except ValueError as e:
        abort(400, jsonify({'status': 'error', 'message': f'Invalid IP address: {str(e)}'}))

def create_dynamic_inventory(master_ips, worker_ips):
    try:
        inventory_content = generate_inventory(master_ips, worker_ips)
        with open('/tmp/dynamic_inventory.ini', 'w') as inventory_file:
            inventory_file.write(inventory_content)
    except Exception as e:
        abort(500, jsonify({'status': 'error', 'message': f'Error creating dynamic inventory: {str(e)}'}))

def build_ansible_command(rke2_version, upgrade_required=False):
    try:
        playbook_path = '/app/rke2.yml'
        ansible_command = [
            'ansible-playbook',
            '-i', '/tmp/dynamic_inventory.ini',
            playbook_path,
            '--user', 'ubuntu',
            '--private-key', 'privatekey.pem',
            '--ssh-common-args', '-o StrictHostKeyChecking=no'
        ]

        if rke2_version:
            ansible_command.extend(['-e', f'rke2_version={rke2_version}'])
        ansible_command.extend(['-e', f'rke2_drain_node_during_upgrade={upgrade_required}'])

        return ansible_command
    except Exception as e:
        abort(500, jsonify({'status': 'error', 'message': f'Error building Ansible command: {str(e)}'}))

@app.route('/api/cluster/create', methods=['POST'])
def create_cluster():
    global cluster_creation_status

    rke2_version = request.json.get('rke2_k8s_version', None)
    master_ips = request.json.get('master_ips', None)
    worker_ips = request.json.get('worker_ips', [])
    cluster_name = request.json.get('cluster_name', None)

    if not rke2_version or not master_ips or not cluster_name:
        missing_params = ', '.join(param for param, value in {'rke2_k8s_version': rke2_version, 'master_ips': master_ips, 'cluster_name': cluster_name}.items() if not value)
        error_message = f'Both rke2_k8s_version, master_ips, and cluster_name are required attributes. Please pass the missing parameter(s) in the JSON payload: {missing_params}'
        return jsonify({'status': 'error', 'message': error_message}), 400

    request_id = str(uuid.uuid4())
    cluster_creation_status = {'status': 'pending', 'message': 'Cluster creation in progress', 'request_id': request_id, 'cluster_name': cluster_name}

    master_ips = validate_ip_addresses(master_ips)
    worker_ips = validate_ip_addresses(worker_ips)

    create_dynamic_inventory(master_ips, worker_ips)
    ansible_command = build_ansible_command(rke2_version)
    start_ansible_playbook(ansible_command)

    return jsonify({'status': 'success', 'message': 'Cluster creation request sent successfully', 'request_id': request_id, 'cluster_name': cluster_name})

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', use_reloader=False)

